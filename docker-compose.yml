version: '3.8'

services:
  # Main trading bot service
  teder-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-1.0.0}
    container_name: teder-trading-bot
    hostname: teder-bot
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - DRY_RUN=${DRY_RUN:-true}
      - COINONE_ACCESS_TOKEN=${COINONE_ACCESS_TOKEN}
      - COINONE_SECRET_KEY=${COINONE_SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TZ=Asia/Seoul
      
    # Volume mounts for persistence
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - ./config:/app/config:rw
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
    
    # Network configuration
    networks:
      - teder-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check override
    healthcheck:
      test: ["/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
    
    # Security settings
    user: "1000:1000"  # Non-root user
    read_only: false   # Need write access for logs
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE  # If monitoring port needed
    
    # Dependency management
    depends_on:
      - log-rotator

  # Log rotation service
  log-rotator:
    image: alpine:latest
    container_name: teder-log-rotator
    restart: unless-stopped
    
    volumes:
      - ./logs:/logs:rw
      - ./scripts:/scripts:ro
    
    command: >
      sh -c "
      echo '0 2 * * * /scripts/rotate-logs.sh' > /etc/crontabs/root &&
      crond -f -d 8"
    
    networks:
      - teder-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "3"

  # Optional: Monitoring service (Prometheus metrics)
  monitoring:
    image: prom/node-exporter:latest
    container_name: teder-monitoring
    restart: unless-stopped
    
    ports:
      - "9100:9100"
    
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    
    networks:
      - teder-network
    
    profiles:
      - monitoring
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: teder-redis
    restart: unless-stopped
    
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data
    
    networks:
      - teder-network
    
    profiles:
      - caching
    
    security_opt:
      - no-new-privileges:true
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# Network configuration
networks:
  teder-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volume definitions
volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

# Health check for the entire stack
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s